
package com.duanchunlin.test;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.PopupFactory;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileSystemView;

import org.jb2011.lnf.beautyeye.BeautyEyeLNFHelper;
import org.jb2011.lnf.beautyeye.utils.Platform;
import org.jb2011.swing9patch.MainFrame;
import org.jb2011.swing9patch.popup.CoolPopupFactory;

/**
 *
 * @author Administrator
 */
public class MainTest extends javax.swing.JFrame {
  private File f = null;
  private List<String> pathList = new ArrayList<String>();
  private JPanel mainPane = new JPanel(new BorderLayout());  
  
  /**
   * Creates new form NewJFrame
   */
  public MainTest() {
   super ("作者：段春林 ");
    initComponents();
  }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
	  setLocationRelativeTo(null);
      setSize(900, 680);
	  
	  Dimension screen= Toolkit.getDefaultToolkit().getScreenSize();// Toolkit.getDefaultToolkit.getScreenSize();//获取屏幕尺寸对象

	  Dimension myframe=this.getSize();//获取当前窗体的尺寸对象
	  int w=(screen.width- myframe.width)/2;//水平位置
	  int h=(screen.height- myframe.width)/2;//垂直位置
	  setLocation(w,h);
	  
	  
    jButton1 = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    this.getContentPane().add(mainPane);
    
    jTextArea1 = new javax.swing.JTextArea();
    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    jButton1.setText("选择文件位置");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openFilePath(evt);
      }
    });
    
    
    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("宋体", 0, 20));
    jTextArea1.setRows(5);
    jTextArea1.setEditable(false);
    jScrollPane1.setViewportView(jTextArea1);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(mainPane);
    
    mainPane.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButton1)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    
    
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        .addContainerGap())
    );
    pack();
    
  }// </editor-fold>//GEN-END:initComponents
  
  private void openFilePath(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilePath
    // TODO add your handling code here:
    int result = 0;
    String path = null;
    JFileChooser fileChooser = new JFileChooser();
    FileSystemView fsv = FileSystemView.getFileSystemView();  //注意了，这里重要的一句
    System.out.println(fsv.getHomeDirectory());				//得到桌面路径
    fileChooser.setCurrentDirectory(fsv.getHomeDirectory());
    fileChooser.setDialogTitle("选择文件路径");
    fileChooser.setApproveButtonText("确定");
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    result = fileChooser.showOpenDialog(this);
    if (JFileChooser.APPROVE_OPTION == result) {
      path = fileChooser.getSelectedFile().getPath();
      System.out.println("path: " + path);
    }
    if(path==null || path.equals("")){
      return;
    }
    jTextArea1.setText("");
    f = new File(path);
    if (f.exists()) {
      getList(f);
      for (String filePath: pathList) {
        File file = new File(filePath);
        if (!file.exists()) {
          break;
        }
        try {
          String str = jTextArea1.getText();
          String s = "文件名:" + file.getName() + "\n" + "文件大小:"+ getFileSize(file) + "Bit; "+ (float)getFileSize(file)/(float)1024/(float)1024+"MB" 
              +ApkUtil.getApkInfo(file.getPath()) + "\n\n";
          jTextArea1.setText(s + str);
        } catch (Exception ex) {
          Logger.getLogger(MainTest.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }
  }
  private void getList(File file){
    if(file.isFile() && file.getName().endsWith(".apk")){
      pathList.add(file.getPath());
    }else{
      File fileList[] = file.listFiles();
      for(File f : fileList){
        try {
          getList(f);
        } catch (Exception e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
      }
    }
  }
  /**
   * 获取指定文件大小
   * @param f
   * @return
   * @throws Exception
   */
  private long getFileSize(File file) throws Exception {
    long size = 0;
    if (file.exists()) {
      FileInputStream fis = null;
      fis = new FileInputStream(file);
      size = fis.available();
    } else {
      file.createNewFile();
    }
    return size;
  }
  /**
   * @param args the command line arguments
   */
  public static void main(final String... args) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     * 
     * 
     */
	  
	  initUserInterface();
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new MainTest().setVisible(true);
//				
//				FixtipPane fp = new FixtipPane();
//				fp.show(frame, frame.getJMenuBar(),0,10);
			}
		});
		
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  // End of variables declaration//GEN-END:variables
	private static void initUserInterface() {
		System.setProperty("apple.laf.useScreenMenuBar", "true");
		System.setProperty(
				"com.apple.mrj.application.apple.menu.about.name",
		"Draw 9-patch");

		try {
			if(Platform.isWindows())
			{
				UIManager.put("RootPane.setupButtonVisible", false);
				BeautyEyeLNFHelper.translucencyAtFrameInactive = false;
				BeautyEyeLNFHelper.launchBeautyEyeLNF();
				// impl a demo PopupFactory
				PopupFactory.setSharedInstance(new CoolPopupFactory());
			}
			else
				UIManager.setLookAndFeel(UIManager
						.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}  
  
  
}